# UV workspace configuration
[tool.uv.workspace]
members = ["shared", "signal-sweep"]
# Add other service directories as you create them

[project]
name = "data-pipeline-dev"
version = "0.1.0"
description = "Development tooling for data pipeline services"
requires-python = ">=3.9"

# UV Scripts for common development tasks
[project.scripts]
test = "pytest"
test-integration = "pytest -m integration"
lint = "ruff check ."
lint-fix = "ruff check --fix ."
format = "ruff format ."
format-check = "ruff format --check ."
check-all = "python -c 'import subprocess; subprocess.run([\"ruff\", \"check\", \".\"]); subprocess.run([\"ruff\", \"format\", \"--check\", \".\"]); subprocess.run([\"pytest\"])'"

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
]

# Ruff configuration for linting and formatting
[tool.ruff]
# Exclude common directories that shouldn't be linted
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*",
]

# Set line length to match your team's preference
line-length = 79 
indent-width = 4

# Target Python version
target-version = "py39"

[tool.ruff.lint]
# Enable these rule categories
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

# Disable specific rules if needed
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

# Allow fix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces, rather than tabs
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Automatically detect the appropriate line ending
line-ending = "auto"

[tool.ruff.lint.isort]
# Group imports by type
combine-as-imports = true
force-sort-within-sections = true

# Pytest configuration
[tool.pytest.ini_options]
# Test discovery patterns
testpaths = ["tests", "*/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Add common markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Minimum version and plugins
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]

# Test output formatting
console_output_style = "progress"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration (if using pytest-cov)
[tool.coverage.run]
source = ["src", "shared/src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
